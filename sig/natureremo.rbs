module NatureRemo
  VERSION: String

  module Endpoints
    include Appliances
    include Devices
    include Signals
    include Users

    module Appliances
    end
    module Devices
    end
    module Signals
    end
    module Users
    end
  end

  class Client
    BASE_URL: String
    API_VERSION: String
    include Endpoints

    @client: Faraday::Connection

    def initialize: (String access_token) -> void

    # NatureRemo::Endpoints::Appliances
    def appliances: -> String
    def create_appliance: (String appliance_id, String nickname, String image, String model, String model_type) -> String
    def update_appliance_orders: (Array[String] appliance_ids) -> String
    def delete_appliance: (String appliance_id) -> String
    def update_appliance: (String appliance_id, String nickname, String image) -> String
    def update_aircon_settings: (String appliance_id, String temperature, String operation_mode, String air_volume, String air_direction) -> String
    def update_tv_state: (String appliance_id, String button) -> String
    def update_light_state: (String appliance_id, String button) -> String

    # NatureRemo::Endpoints::Devices
    def devices: -> String
    def update_device: (String device_id, String name) -> String
    def delete_device: (String device_id) -> String
    def update_device_temperature_offset: (String device_id, String offset) -> String
    def update_device_humidity_offset: (String device_id, String offset) -> String

    # NatureRemo::Endpoints::Signals
    def signals: (String device_id) -> String
    def create_signal: (String appliance_id, String name, String image, String message) -> String
    def update_signal_orders: (String appliance_id, Array[String] signal_ids) -> String
    def update_signal: (String appliance_id, String name, String image) -> String
    def delete_signal: (String signal_id) -> String
    def send_signal: (String signal_id) -> String

    # NatureRemo::Endpoints::Users
    def user: -> String
    def update_user_nickname: (String nickname) -> String

    private
    def get: (String path) -> String
    def post: (String path, ?(Hash[untyped, untyped] | nil) params) -> String
  end

  class Error < StandardError
    attr_reader env: untyped
    attr_reader url: untyped
    attr_reader status: untyped
    attr_reader headers: untyped
    attr_reader body: untyped
    attr_reader error_code: untyped

    def initialize: (env: untyped) -> void
  end

  class ClientError < Error
  end
  class BadRequest < ClientError
  end
  class Unauthorized < ClientError
  end
  class Forbidden < ClientError
  end
  class NotFound < ClientError
  end
  class MethodNotAllowed < ClientError
  end
  class PayloadTooLarge < ClientError
  end
  class UnprocessableEntity < ClientError
  end
  class TooManyRequests < ClientError
  end

  class ServerError < Error
  end
  class InternalServerError < ServerError
  end
  class BadGateway < ServerError
  end
  class ServiceUnavailable < ServerError
  end
  class GatewayTimeout < ServerError
  end
  class NilStatusError < ServerError
  end

  class RaiseError < Faraday::Middleware
    def on_complete: (untyped env) -> untyped
  end
end

# faraday's type definition is not sufficient
module Faraday
  class Middleware
  end
end
